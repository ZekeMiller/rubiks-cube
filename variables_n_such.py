"""
Just a place to house some lengthy variables and data (H A S H M A P S) I made to make comparisons and data retrieval
easier
"""


solved_cube_pos = {
    "corner_bry": [-1, 1, -1],
    "edge_by": [0, 1, -1],
    "corner_boy": [1, 1, -1],
    "edge_ry": [-1, 1, 0],
    "center_y": [0, 1, 0],
    "edge_oy": [1, 1, 0],
    "corner_gry": [-1, 1, 1],
    "edge_gy": [0, 1, 1],
    "corner_goy": [1, 1, 1],
    "edge_br": [-1, 0, -1],
    "center_b": [0, 0, -1],
    "edge_bo": [1, 0, -1],
    "center_o": [1, 0, 0],
    "edge_go": [1, 0, 1],
    "center_g": [0, 0, 1],
    "edge_gr": [-1, 0, 1],
    "center_r": [-1, 0, 0],
    "corner_brw": [-1, -1, -1],
    "edge_bw": [0, -1, -1],
    "corner_bow": [1, -1, -1],
    "edge_rw": [-1, -1, 0],
    "center_w": [0, -1, 0],
    "edge_ow": [1, -1, 0],
    "corner_grw": [-1, -1, 1],
    "edge_gw": [0, -1, 1],
    "corner_gow": [1, -1, 1],
}


solved_cube_col = {
    "corner_bry": ['r', 'y', 'b'],
    "edge_by": [0, 'y', 'b'],
    "corner_boy": ['o', 'y', 'b'],
    "edge_ry": ['r', 'y', 0],
    "center_y": [0, 'y', 0],
    "edge_oy": ['o', 'y', 0],
    "corner_gry": ['r', 'y', 'g'],
    "edge_gy": [0, 'y', 'g'],
    "corner_goy": ['o', 'y', 'g'],
    "edge_br": ['r', 0, 'b'],
    "center_b": [0, 0, 'b'],
    "edge_bo": ['o', 0, 'b'],
    "center_o": ['o', 0, 0],
    "edge_go": ['o', 0, 'g'],
    "center_g": [0, 0, 'g'],
    "edge_gr": ['r', 0, 'g'],
    "center_r": ['r', 0, 0],
    "corner_brw": ['r', 'w', 'b'],
    "edge_bw": [0, 'w', 'b'],
    "corner_bow": ['o', 'w', 'b'],
    "edge_rw": ['r', 'w', 0],
    "center_w": [0, 'w', 0],
    "edge_ow": ['o', 'w', 0],
    "corner_grw": ['r', 'w', 'g'],
    "edge_gw": [0, 'w', 'g'],
    "corner_gow": ['o', 'w', 'g']
}


# this could definitely be done with some clever looping
indexes_for_printing = [
    [-1, 1, -1], 'y',
    [0, 1, -1], 'y',
    [1, 1, -1], 'y',
    [-1, 1, 0], 'y',
    [0, 1, 0], 'y',
    [1, 1, 0], 'y',
    [-1, 1, 1], 'y',
    [0, 1, 1], 'y',
    [1, 1, 1], 'y',
    [-1, 1, -1], 'x',
    [-1, 1, 0], 'x',
    [-1, 1, 1], 'x',
    [-1, 1, 1], 'z',
    [0, 1, 1], 'z',
    [1, 1, 1], 'z',
    [1, 1, 1], 'x',
    [1, 1, 0], 'x',
    [1, 1, -1], 'x',
    [1, 1, -1], 'z',
    [0, 1, -1], 'z',
    [-1, 1, -1], 'z',
    [-1, 0, -1], 'x',
    [-1, 0, 0], 'x',
    [-1, 0, 1], 'x',
    [-1, 0, 1], 'z',
    [0, 0, 1], 'z',
    [1, 0, 1], 'z',
    [1, 0, 1], 'x',
    [1, 0, 0], 'x',
    [1, 0, -1], 'x',
    [1, 0, -1], 'z',
    [0, 0, -1], 'z',
    [-1, 0, -1], 'z',
    [-1, -1, -1], 'x',
    [-1, -1, 0], 'x',
    [-1, -1, 1], 'x',
    [-1, -1, 1], 'z',
    [0, -1, 1], 'z',
    [1, -1, 1], 'z',
    [1, -1, 1], 'x',
    [1, -1, 0], 'x',
    [1, -1, -1], 'x',
    [1, -1, -1], 'z',
    [0, -1, -1], 'z',
    [-1, -1, -1], 'z',
    [-1, -1, 1], 'y',
    [0, -1, 1], 'y',
    [1, -1, 1], 'y',
    [-1, -1, 0], 'y',
    [0, -1, 0], 'y',
    [1, -1, 0], 'y',
    [-1, -1, -1], 'y',
    [0, -1, -1], 'y',
    [1, -1, -1], 'y'

]


# I am a genius :ok_hand:
turn_positions = {
    'U': [
        [-1, 1, -1],
        [0, 1, -1],
        [1, 1, -1],
        [1, 1, 0],
        [1, 1, 1],
        [0, 1, 1],
        [-1, 1, 1],
        [-1, 1, 0]
    ],
    'E': [
        [-1, 0, -1],
        [0, 0, -1],
        [1, 0, -1],
        [1, 0, 0],
        [1, 0, 1],
        [0, 0, 1],
        [-1, 0, 1],
        [-1, 0, 0]
    ],
    'D': [
        [-1, -1, 0],
        [-1, -1, 1],
        [0, -1, 1],
        [1, -1, 1],
        [1, -1, 0],
        [1, -1, -1],
        [0, -1, -1],
        [-1, -1, -1]
    ],
    'L': [
        [-1, 0, -1],
        [-1, 1, -1],
        [-1, 1, 0],
        [-1, 1, 1],
        [-1, 0, 1],
        [-1, -1, 1],
        [-1, -1, 0],
        [-1, -1, -1]
    ],
    'M': [
        [0, 1, 1],
        [0, 1, 0],
        [0, 1, -1],
        [0, 0, -1],
        [0, -1, -1],
        [0, -1, 0],
        [0, -1, 1],
        [0, 0, 1]
    ],
    'R': [
        [1, 1, 1],
        [1, 1, 0],
        [1, 1, -1],
        [1, 0, -1],
        [1, -1, -1],
        [1, -1, 0],
        [1, -1, 1],
        [1, 0, 1]
    ],
    'B': [
        [-1, 0, -1],
        [-1, -1, -1],
        [0, -1, -1],
        [1, -1, -1],
        [1, 0, -1],
        [1, 1, -1],
        [0, 1, -1],
        [-1, 1, -1]
    ],
    'S': [
        [-1, 1, 0],
        [0, 1, 0],
        [1, 1, 0],
        [1, 0, 0],
        [1, -1, 0],
        [0, -1, 0],
        [-1, -1, 0],
        [-1, 0, 0]
    ],

    'F': [
        [-1, 1, 1],
        [0, 1, 1],
        [1, 1, 1],
        [1, 0, 1],
        [1, -1, 1],
        [0, -1, 1],
        [-1, -1, 1],
        [-1, 0, 1]
    ],

}


# could probably improve but eh
translation = {
    'U': ['U'],
    'u': ['E', 'U'],
    'D': ['D'],
    'd': ['E', 'E', 'E', 'D'],
    'L': ['L'],
    'l': ['M', 'M', 'M', 'L'],
    'R': ['R'],
    'r': ['M', 'R'],
    'B': ['B'],
    'b': ['S', 'S', 'S', 'B'],
    'F': ['F'],
    'M': ['M'],
    'E': ['E'],
    'S': ['S'],
    'f': ['S', 'F'],
    'x': ['R', 'M', 'L', 'L', 'L'],
    'y': ['U', 'E', 'D', 'D', 'D'],
    'z': ['F', 'S', 'B', 'B', 'B']

}


# I'm like a bouncer for rubik's cubes
acceptable_list = [
    'U', 'U2', 'U\'',
    'D', 'D2', 'D\'',
    'L', 'L2', 'L\'',
    'R', 'R2', 'R\'',
    'B', 'B2', 'B\'',
    'F', 'F2', 'F\'',

    'M', 'M2', 'M\'',
    'E', 'E2', 'E\'',
    'S', 'S2', 'S\'',

    'f', 'f2', 'f\'',
    'b', 'b2', 'b\'',
    'r', 'r2', 'r\'',
    'l', 'l2', 'l\'',
    'd', 'd2', 'd\'',
    'u', 'u2', 'u\'',

    'x', 'x2', 'x\'',
    'y', 'y2', 'y\'',
    'z', 'z2', 'z\''
]


# who needs math and logic when you have H A S H M A P S
scramble_list = {
    "U": [
        "L", "L2", "L'",
        "R", "R2", "R'",
        "B", "B2", "B'",
        "F", "F2", "F'",
        "l", "l2", "l'",
        "r", "r2", "r'",
        "b", "b2", "b'",
        "f", "f2", "f'",
        "x", "y", "z"

    ],
    "D": [
        "L", "L2", "L'",
        "R", "R2", "R'",
        "B", "B2", "B'",
        "F", "F2", "F'",
        "l", "l2", "l'",
        "r", "r2", "r'",
        "b", "b2", "b'",
        "f", "f2", "f'",
        "x", "y", "z"
    ],
    "L": [
        "U", "U2", "U'",
        "D", "D2", "D'",
        "B", "B2", "B'",
        "F", "F2", "F'",
        "u", "u2", "u'",
        "d", "d2", "d'",
        "b", "b2", "b'",
        "f", "f2", "f'",
        "x", "y", "z"

    ],
    "R": [
        "U", "U2", "U'",
        "D", "D2", "D'",
        "B", "B2", "B'",
        "F", "F2", "F'",
        "u", "u2", "u'",
        "d", "d2", "d'",
        "b", "b2", "b'",
        "f", "f2", "f'",
        "x", "y", "z"
    ],
    "F": [
        "U", "U2", "U'",
        "D", "D2", "D'",
        "R", "R2", "R'",
        "L", "L2", "L'",
        "l", "l2", "l'",
        "r", "r2", "r'",
        "u", "u2", "u'",
        "d", "d2", "d'",
        "x", "y", "z"
    ],
    "B": [
        "U", "U2", "U'",
        "D", "D2", "D'",
        "R", "R2", "R'",
        "L", "L2", "L'",
        "l", "l2", "l'",
        "r", "r2", "r'",
        "u", "u2", "u'",
        "d", "d2", "d'",
        "x", "y", "z"
    ]

}


pll_sequencer_faces = [
    [-1, 1, -1, 'x'],
    [-1, 1, 0, 'x'],
    [-1, 1, 1, 'x'],
    [-1, 1, 1, 'z'],
    [0, 1, 1, 'z'],
    [1, 1, 1, 'z'],
    [1, 1, 1, 'x'],
    [1, 1, 0, 'x'],
    [1, 1, -1, 'x'],
    [1, 1, -1, 'z'],
    [0, 1, -1, 'z'],
    [-1, 1, -1, 'z']
]


pll_sequences = {
    'u_perm_a': [1, 2, 1, 2, 3, 2, 3, 1, 3, 4, 4, 4],
    'u_perm_b': [1, 2, 1, 3, 1, 3, 2, 3, 2, 4, 4, 4],
    'z_perm': [1, 2, 1, 3, 4, 3, 4, 3, 4, 2, 1, 2],
    'h_perm': [1, 2, 1, 3, 4, 3, 2, 1, 2, 4, 3, 4],
    'a_perm_a': [1, 2, 2, 3, 3, 1, 2, 4, 3, 4, 1, 4],
    'a_perm_b': [1, 1, 2, 3, 2, 3, 4, 3, 1, 2, 4, 4],
    'e_perm': [1, 2, 3, 2, 1, 4, 3, 4, 1, 4, 3, 2],
    'r_perm_a': [1, 2, 3, 2, 3, 2, 4, 4, 1, 3, 1, 4],
    'r_perm_b': [1, 2, 2, 3, 4, 3, 4, 3, 1, 2, 1, 4],
    'j_perm_a': [1, 1, 2, 3, 3, 3, 4, 4, 1, 2, 2, 4],
    'j_perm_b': [1, 1, 1, 2, 3, 3, 4, 2, 2, 3, 4, 4],
    't_perm': [1, 2, 1, 3, 3, 2, 4, 1, 3, 2, 4, 4],
    'f_perm': [1, 2, 3, 2, 3, 1, 3, 1, 2, 4, 4, 4],
    'v_perm': [1, 2, 2, 3, 3, 4, 2, 4, 1, 4, 1, 3],
    'y_perm': [1, 2, 3, 4, 4, 2, 3, 1, 1, 2, 3, 4],
    'n_perm_a': [1, 2, 2, 3, 4, 4, 2, 1, 1, 4, 3, 3],
    'n_perm_b': [1, 1, 2, 3, 3, 4, 2, 2, 1, 4, 4, 3],
    'g_perm_a': [1, 2, 1, 3, 4, 4, 2, 1, 3, 4, 3, 2],
    'g_perm_b': [1, 2, 1, 3, 4, 2, 4, 3, 3, 2, 1, 4],
    'g_perm_c': [1, 2, 1, 2, 3, 4, 3, 1, 2, 4, 4, 3],
    'g_perm_d': [1, 2, 1, 3, 1, 2, 4, 4, 3, 2, 3, 4],
    'pll_done': [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]
}


f2l_position_translator = {
    "FRU": [1, 1, 1],
    "DFR": [1, -1, 1],
    "FU": [0, 1, 1],
    "RU": [1, 1, 0],
    "FR": [1, 0, 1],
    "BU": [0, 1, -1],
    "LU": [-1, 1, 0],
    0: 'x',
    1: 'y',
    2: 'z'
}
